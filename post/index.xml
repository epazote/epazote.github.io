<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on epazote</title>
    <link>https://epazote.io/post/</link>
    <description>Recent content in Posts on epazote</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Sep 2016 04:00:00 +0000</lastBuildDate>
    <atom:link href="https://epazote.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How it works</title>
      <link>https://epazote.io/post/how-it-works/</link>
      <pubDate>Tue, 20 Sep 2016 04:00:00 +0000</pubDate>
      
      <guid>https://epazote.io/post/how-it-works/</guid>
      <description>&lt;p&gt;In its basic way of operation,  &lt;strong&gt;Epazote&lt;/strong&gt; periodically checks the services endpoints
&amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Uniform_Resource_Locator&#34;&gt;URLs&lt;/a&gt;&amp;ldquo;
by doing an &lt;a href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&#34;&gt;HTTP GET Request&lt;/a&gt;,
based on the response &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes&#34;&gt;Status code&lt;/a&gt;,
&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_HTTP_header_fields&#34;&gt;Headers&lt;/a&gt; or
either the
&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_message_body&#34;&gt;body&lt;/a&gt;, it executes a command.&lt;/p&gt;

&lt;p&gt;In most scenarios, is desired to apply a command directly to the application in
cause, like a signal (&lt;code&gt;kill -HUP&lt;/code&gt;), or either a restart, therefore in this
case &lt;strong&gt;Epazote&lt;/strong&gt; and the application should be running on the same server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Epazote&lt;/strong&gt; can also work in a standalone mode by only monitoring and sending
alerts if desired.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/86545&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/86545.png&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to use it</title>
      <link>https://epazote.io/post/how-to-use-it/</link>
      <pubDate>Tue, 20 Sep 2016 02:00:00 +0000</pubDate>
      
      <guid>https://epazote.io/post/how-to-use-it/</guid>
      <description>

&lt;h1 id=&#34;how-to-use-it&#34;&gt;How to use it&lt;/h1&gt;

&lt;p&gt;First you need to install &lt;strong&gt;Epazote&lt;/strong&gt;, either you can compile it from
&lt;a href=&#34;https://github.com/epazote/epazote&#34;&gt;source&lt;/a&gt;
or download a pre-compiled binary matching your operating system from here:
&lt;a href=&#34;https://bintray.com/nbari/epazote/epazote/_latestVersion&#34;&gt;https://bintray.com/nbari/epazote/epazote/_latestVersion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To compile from source, after downloading the sources use &lt;code&gt;make&lt;/code&gt; to build the
binary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/projects/go/src/github.com/epazote/epazote
$ make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Epazote&lt;/strong&gt; was designed with simplicity in mind, as an easy tool for
 &lt;a href=&#34;https://en.wikipedia.org/wiki/DevOps&#34;&gt;DevOps&lt;/a&gt; and as a complement to
 infrastructure orchestration tools like &lt;a href=&#34;http://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt; and
 &lt;a href=&#34;http://saltstack.com/&#34;&gt;SaltStack&lt;/a&gt;, because of this &lt;a href=&#34;http://www.yaml.org/&#34;&gt;YAML&lt;/a&gt;
 is used for the configuration files, avoiding with this, the learn of a new
 language or syntax and simplifying the setup.&lt;/p&gt;

&lt;h2 id=&#34;basic-example&#34;&gt;Basic example&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;services:
    google:
        url: https://www.google.com
        seconds: 5
        expect:
            status: 302
            ssl:
                hours: 72
            if_not:
                cmd: echo -n &amp;quot;google down&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To supervise &lt;code&gt;google&lt;/code&gt; you would run (basic.yml is a file containing the above code):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ epazote -f /path/to/yaml/file/basic.yml -d
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;-d is for debugging, will print all output to standard output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/86545&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/86545.png&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This example, will supervise every 5 seconds the service with name
&lt;code&gt;google&lt;/code&gt;, it will do an HTTP GET to &lt;code&gt;http://www.google.com&lt;/code&gt; and will expect
an &lt;code&gt;302 Status code&lt;/code&gt; if not,  it will &lt;code&gt;echo -n &amp;quot;google down&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ssl: hours: 72&lt;/code&gt; means to send an alert if the certificate is about to
expire in the next 72 hours.&lt;/p&gt;

&lt;p&gt;Extending the basic example for receiving notifications:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config:
    smtp:
        username: smtp@domain.tld
        password: password
        server: mail.example.com
        port: 587
        headers:
            from: you@domain.tld
            to: team@domain.tld
            subject: &amp;quot;[_name_, _because_]&amp;quot;

services:
    google:
        url: http://www.google.com
        minutes: 3
        threshold:
            healthy: 2 # consecutive successes
            unhealthy: 2 # consecutive failures
        expect:
            status: 200
            if_not:
                cmd: echo -n &amp;quot;google down&amp;quot;
                notify: yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, every 3 minutes the service will be checked and in case of not
receiving a &lt;code&gt;200 Status code&lt;/code&gt; more than 2 times:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;threshold:
    unhealthy: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides executing the command: &lt;code&gt;echo -n &amp;quot;google down&amp;quot;&lt;/code&gt; an email is going to be
send to &lt;code&gt;team@domain.tld&lt;/code&gt;, this because of the &lt;code&gt;notify: yes&lt;/code&gt; setting.&lt;/p&gt;

&lt;p&gt;After getting 2 consecutive successful responses &lt;code&gt;200 status code&lt;/code&gt;, an alert
is also sent.&lt;/p&gt;

&lt;h2 id=&#34;the-configuration-file&#34;&gt;The configuration file&lt;/h2&gt;

&lt;p&gt;The configuration file (&lt;a href=&#34;https://en.wikipedia.org/wiki/YAML&#34;&gt;YAML formated&lt;/a&gt;)
consists of two parts, a &lt;a href=&#34;https://epazote.io/post/the-config/&#34;&gt;config&lt;/a&gt; and a &lt;a href=&#34;https://epazote.io/post/the-services&#34;&gt;services&lt;/a&gt; (Key-value pairs).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The config</title>
      <link>https://epazote.io/post/the-config/</link>
      <pubDate>Tue, 20 Sep 2016 02:00:00 +0000</pubDate>
      
      <guid>https://epazote.io/post/the-config/</guid>
      <description>

&lt;h1 id=&#34;the-config-section&#34;&gt;The config section&lt;/h1&gt;

&lt;p&gt;The &lt;strong&gt;config&lt;/strong&gt; section is composed of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- smtp (Email settings for sending notification)
- scan (Paths used to find the file &#39;epazote.yml&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config:
    smtp:
        username: smtp@domain.tld
        password: password
        server: mail.example.com
        port: 587
        headers:
            from: epazote@domain.tld
            to: team@domain.tld ops@domain.tld etc@domain.tld
            subject: &amp;quot;[_name_, _because_]&amp;quot;
    scan:
        paths:
            - /arena/home/sites
            - /home/apps
        minutes: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;config-smtp&#34;&gt;config - smtp&lt;/h3&gt;

&lt;p&gt;Required to properly send alerts via email, all fields are required, the
&lt;code&gt;headers&lt;/code&gt; section can be extended with any desired key-pair values.&lt;/p&gt;

&lt;h3 id=&#34;config-smtp-subject&#34;&gt;config - smtp - subject&lt;/h3&gt;

&lt;p&gt;The subject can be formed by using this keywords:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    _because_  _exit_ _name_ _output_ _status_ _url_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;on the previous example, &lt;code&gt;subject: [_name_, _status_]&lt;/code&gt; would transform to
&lt;code&gt;[my service - 500]&lt;/code&gt; the &lt;code&gt;name&lt;/code&gt; has replaced by the service name, &lt;code&gt;my
service&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt; by the response status code &lt;code&gt;500&lt;/code&gt; in this case.&lt;/p&gt;

&lt;h3 id=&#34;config-scan&#34;&gt;config - scan&lt;/h3&gt;

&lt;p&gt;Paths to scan every N &lt;code&gt;seconds&lt;/code&gt;, &lt;code&gt;minutes&lt;/code&gt; or &lt;code&gt;hours&lt;/code&gt;, a search for
services specified in a file call &lt;code&gt;epazote.yml&lt;/code&gt; is made.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;scan&lt;/strong&gt; setting is optional however is very useful when doing Continues
Deployments. for example if your code is automatically uploaded to the
directory &lt;code&gt;/arena/home/sites/application_1&lt;/code&gt; and your scan paths contain
&lt;code&gt;/arena/home/sites&lt;/code&gt;, you could simple upload on your application directory a
file named &lt;code&gt;epazote.yml&lt;/code&gt; with the service rules, thus achieving the deployment
of your application and the supervising at the same time.&lt;/p&gt;

&lt;h3 id=&#34;config-optional&#34;&gt;config (optional)&lt;/h3&gt;

&lt;p&gt;As you may notice the &lt;code&gt;config&lt;/code&gt; section contains mainly settings for sending
alerts/notifications apart from the &lt;code&gt;scan&lt;/code&gt; setting, therefore is totally
optional, meaning that &lt;strong&gt;Epazote&lt;/strong&gt; can still run and check your services without
the need of the &lt;code&gt;config&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;If you want to automatically update/load services you will need the
&lt;code&gt;config - scan&lt;/code&gt; setting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The services</title>
      <link>https://epazote.io/post/the-services/</link>
      <pubDate>Tue, 20 Sep 2016 01:00:00 +0000</pubDate>
      
      <guid>https://epazote.io/post/the-services/</guid>
      <description>

&lt;h1 id=&#34;the-services-section&#34;&gt;The services section&lt;/h1&gt;

&lt;p&gt;Services are the main functionality of &lt;strong&gt;Epazote&lt;/strong&gt;, is where the URL&amp;rsquo;s and the
rules based on the response are defined, since options vary from service to
service, an example could help better to understand the setup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;services:
    my service 1:
        url: http://myservice.domain.tld/_healthcheck_
        timeout: 5
        seconds: 60
        log: http://monitor.domain.tld
        expect:
            status: 200
            header:
                content-type: application/json
            body: find this string on my site
            if_not:
                cmd: sv restart /services/my_service_1
                notify: team@domain.tld
                msg: |
                    line 1 bla bla
                    line 2
        if_status:
            500:
                cmd: reboot
            404:
                cmd: sv restart /services/cache
                msg: restarting cache
                notify: team@domain.tld x@domain.tld
        if_header:
            x-amqp-kapputt:
                cmd: restart abc
                notify: bunny@domain.tld
                msg: |
                    The rabbit is angry
                    &amp;amp; hungry
            x-db-kapputt:
                cmd: svc restart /services/db

    other service:
        url: https://self-signed.ssl.tld/ping
        header:
            Origin: http://localhost
            Accept-Encoding: gzip
        insecure: true
        ssl:
            hours: 48
        minutes: 3

    redirect service:
        url: http://test.domain.tld/
        follow: yes
        hour: 1
        threshold:
            unhealthy: 1
        expect:
            status: 302
            if_not:
                cmd: service restart abc
                notify: yes
                emoji: 1F600-1F621

    salt-master:
        test: pgrep -f salt
        if_not:
            cmd: service restart salt_master
            notify: operations@domain.tld
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;services-name-of-service-string&#34;&gt;services - name of service (string)&lt;/h3&gt;

&lt;p&gt;An unique string that identifies your service, in the above example, there are 3
services named:
 - my service 1
 - other service
 - redirect service&lt;/p&gt;

&lt;h3 id=&#34;services-url-string&#34;&gt;services - url (string)&lt;/h3&gt;

&lt;p&gt;URL of the service to supervise&lt;/p&gt;

&lt;h3 id=&#34;services-follow-boolean-true-false&#34;&gt;services - follow (boolean true/false)&lt;/h3&gt;

&lt;p&gt;By default if a &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_302&#34;&gt;302 Status code&lt;/a&gt; is
received, &lt;strong&gt;Epazote&lt;/strong&gt; will not follow it, if you would like to follow all
redirects, this setting must be set to &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;services-insecure-boolean-true-false&#34;&gt;services - insecure (boolean true/false)&lt;/h3&gt;

&lt;p&gt;This option explicitly allows &lt;strong&gt;Epazote&lt;/strong&gt; to perform &amp;ldquo;insecure&amp;rdquo; SSL connections.
It will disable the certificate verification.&lt;/p&gt;

&lt;h3 id=&#34;services-ssl-seconds-minutes-hours&#34;&gt;services - ssl (seconds, minutes, hours)&lt;/h3&gt;

&lt;p&gt;Alert before the certificate expires:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssl:
    hours: 24
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;services-stop-int&#34;&gt;services - stop (int)&lt;/h3&gt;

&lt;p&gt;Defines the number or times the &lt;code&gt;cmd&lt;/code&gt; will be executed, by default the &lt;code&gt;cmd&lt;/code&gt;
is executed only once, with the intention to avoid indefinitely loops. If value
is set to &lt;code&gt;-1&lt;/code&gt; the &lt;code&gt;cmd&lt;/code&gt; never stops. defaults to 0, &lt;code&gt;stop 2&lt;/code&gt; will execute
&amp;ldquo;0, 1, 2&amp;rdquo; (3 times) the &lt;code&gt;cmd&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;services-timeout-in-seconds-int&#34;&gt;services - timeout in seconds (int)&lt;/h3&gt;

&lt;p&gt;Timeout specifies a time limit for the HTTP requests, A value of zero means no
timeout, defaults to 5 seconds.&lt;/p&gt;

&lt;h3 id=&#34;services-retry-limit-int&#34;&gt;services - retry_limit (int)&lt;/h3&gt;

&lt;p&gt;Specifies the number of times to retry an request, defaults to 3.&lt;/p&gt;

&lt;h3 id=&#34;services-retry-interval-int&#34;&gt;services - retry_interval (int)&lt;/h3&gt;

&lt;p&gt;Specifies the time between attempts in milliseconds. The default value is 500 (0.5 seconds).&lt;/p&gt;

&lt;h3 id=&#34;services-read-limit-int&#34;&gt;services - read_limit (int)&lt;/h3&gt;

&lt;p&gt;Read only &lt;code&gt;N&lt;/code&gt; number of bytes instead of the full
body. This helps to make a more &amp;ldquo;complete&amp;rdquo; request and
avoid getting an HTTP status code &lt;a href=&#34;http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/ts-el b-error-message.html#ts-elb-errorcodes-http408&#34;&gt;408 when testing aws ELB&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;services-threshold-healthy-unhealthy&#34;&gt;services - threshold (healthy/unhealthy)&lt;/h3&gt;

&lt;p&gt;Alert after the threshold has been reached, by default is set to 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;threshold:
    healthy: 2
    unhealth: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If set to 0 it will be disabled.&lt;/p&gt;

&lt;h3 id=&#34;services-seconds-minutes-hours&#34;&gt;services - seconds, minutes, hours&lt;/h3&gt;

&lt;p&gt;How often to check the service, the options are: (Only one should be used)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;seconds N&lt;/li&gt;
&lt;li&gt;minutes N&lt;/li&gt;
&lt;li&gt;hours N&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;N&lt;/code&gt; should be an integer,  defaults to 60 seconds.&lt;/p&gt;

&lt;h3 id=&#34;services-log-url&#34;&gt;services - log (URL)&lt;/h3&gt;

&lt;p&gt;An URL to post all events, default disabled.&lt;/p&gt;

&lt;h3 id=&#34;services-expect&#34;&gt;services - expect&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;expect&lt;/code&gt; block options are:
- status (int)
- header (key, value)
- body   (regular expression)
- if_not (Action block)&lt;/p&gt;

&lt;h3 id=&#34;services-expect-status&#34;&gt;services - expect - status&lt;/h3&gt;

&lt;p&gt;An Integer representing the expected &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes&#34;&gt;HTTP Status Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;services-expect-header-start-with-match&#34;&gt;services - expect - header (start_with match)&lt;/h3&gt;

&lt;p&gt;A key-value map of expected headers, it can be only one or more.&lt;/p&gt;

&lt;p&gt;The headers will be considered valid if they starts with the required value,
for example if you want to check for &lt;code&gt;Content-type: application/json; charset=utf-8&lt;/code&gt;
you can simple do something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;header:
    Content-Type: application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This helps to simplify the matching and useful in cases where the headers
changes, for example: &lt;code&gt;Content-Range: bytes 100-64656926/64656927&lt;/code&gt; can be
matched with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;header:
    Content-Range: bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;services-expect-body&#34;&gt;services - expect - body&lt;/h3&gt;

&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression&#34;&gt;regular expression&lt;/a&gt; used
to match a string on the body of the site, use full in cases you want to ensure
that the content delivered is always the same or keeps a pattern.&lt;/p&gt;

&lt;h3 id=&#34;services-expect-how-it-works&#34;&gt;services - expect (How it works)&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;expect&lt;/code&gt; logic tries to implement a
&lt;a href=&#34;https://en.wikipedia.org/wiki/if_else&#34;&gt;if-else&lt;/a&gt; logic &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;,
&lt;code&gt;body&lt;/code&gt; are the &lt;strong&gt;if&lt;/strong&gt; and the &lt;code&gt;if_not&lt;/code&gt; block becomes the &lt;strong&gt;else&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if
    status
    header
    body
else:
    if_not
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In must cases only one option is required, check on the above example for the service named &amp;ldquo;redirect service&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;In case that more than one option is used, this is the order in how they are evaluated, no meter how they where introduced on the configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. body
2. status
3. header
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason for this order is related to performance, at the end we want to
monitor/supervise the services in an efficient way avoiding to waste extra
resources, in must cases only the HTTP Headers are enough to take an action,
therefore we don&amp;rsquo;t need to read the full body page, because of this if no
&lt;code&gt;body&lt;/code&gt; is defined, &lt;strong&gt;Epazote&lt;/strong&gt; will only read the Headers saving with this
time and process time.&lt;/p&gt;

&lt;h3 id=&#34;services-expect-if-not&#34;&gt;services - expect - if_not&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;if_not&lt;/code&gt; is a block with an action of what to do it we don&amp;rsquo;t get what we where
expecting (&lt;code&gt;expect&lt;/code&gt;). See services - Actions&lt;/p&gt;

&lt;h3 id=&#34;services-if-status-if-header&#34;&gt;services - if_status  &amp;amp; if_header&lt;/h3&gt;

&lt;p&gt;There maybe cases in where third-party dependencies are down and because of this
your application could not be working properly, for this cases the &lt;code&gt;if_status&lt;/code&gt;
and &lt;code&gt;if_header&lt;/code&gt; could be useful.&lt;/p&gt;

&lt;p&gt;For example if the database is your application could start responding an status
code 500 or either a custom header and based on does values take execute an
action:&lt;/p&gt;

&lt;p&gt;The format for &lt;code&gt;if_status&lt;/code&gt; is a key-pair where key is an int representing an
HTTP status code, and the value an Action option&lt;/p&gt;

&lt;p&gt;The format for &lt;code&gt;if_header&lt;/code&gt; is a key-pair where key is a string of something
you could relate/match and has in other if_X conditions, value is an Action.&lt;/p&gt;

&lt;p&gt;This are the only &lt;code&gt;if&#39;s&lt;/code&gt; and the order of execution:
 1. if_status
 2. if_header
 3. if_not&lt;/p&gt;

&lt;p&gt;This means that if a service uses &lt;code&gt;if_status&lt;/code&gt; and &lt;code&gt;if_not&lt;/code&gt;, it will
evaluate first the &lt;code&gt;if_status&lt;/code&gt; and execute an Action if required, in case
an &lt;code&gt;if_status&lt;/code&gt; and &lt;code&gt;if_header&lt;/code&gt; are set, same applies, first is evaluated
&lt;code&gt;if_status&lt;/code&gt;, then &lt;code&gt;if_header&lt;/code&gt; and last &lt;code&gt;if_not&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;services-actions&#34;&gt;services - Actions&lt;/h2&gt;

&lt;p&gt;An Action has five options:
 - cmd
 - notify
 - msg
 - emoji
 - http&lt;/p&gt;

&lt;p&gt;They can be used all together, only one or either none.&lt;/p&gt;

&lt;h3 id=&#34;services-actions-cmd-string&#34;&gt;services - Actions - cmd (string)&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cmd&lt;/code&gt; Contains the command to be executed.&lt;/p&gt;

&lt;h3 id=&#34;services-actions-notify-string&#34;&gt;services - Actions - notify (string)&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;notify&lt;/code&gt; Should contain &lt;code&gt;yes&lt;/code&gt;, the email email address or addresses (space separated)
of the recipients that will be notified when the action is executed.&lt;/p&gt;

&lt;p&gt;If the string is &lt;code&gt;yes&lt;/code&gt; the global recipients will be used.&lt;/p&gt;

&lt;h3 id=&#34;services-actions-msg-list&#34;&gt;services - Actions - msg (list)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;msg:
- send this if exit 0 (all OK)
- send this if exit 1 (something is wrong)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Based on the exit status either msg[0] or msg[1] is used,&lt;/p&gt;

&lt;h3 id=&#34;services-actions-emoji-list&#34;&gt;services - Actions - emoji (list)&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;emoji&lt;/code&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Unicode&#34;&gt;Unicode&lt;/a&gt; characters
to be used in the subject, example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;emoji:
- 1F600
- 1F621
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If services are OK they will use the first &lt;code&gt;1F600&lt;/code&gt; if not they will
use &lt;code&gt;1F621&lt;/code&gt;, if set to &lt;code&gt;0&lt;/code&gt; no emoji will be used. The idea behind using
&lt;a href=&#34;https://en.wikipedia.org/wiki/Emoticons_(Unicode_block)&#34;&gt;unicode/emoji&lt;/a&gt;
is to cough attention faster and not just ignore the email thinking is spam.&lt;/p&gt;

&lt;h3 id=&#34;service-actions-http-list-key-value&#34;&gt;service - Actions - http (list(key, value))&lt;/h3&gt;

&lt;p&gt;A custom URL to GET/POST depending on the exit status, example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http:
- url: &amp;quot;https://api.hipchat.com/v1/rooms/message?auth_token=your_token&amp;amp;room_id=7&amp;amp;from=Alerts&amp;amp;message=service+OK+_name_+_because_&amp;quot;
- url: &amp;quot;https://api.hipchat.com/&amp;quot;
    header:
    Content-Type: application/x-www-form-urlencoded
    data: |
    room_id=10&amp;amp;from=Alerts&amp;amp;message=_name_+exit+code+_exit_
    method: POST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a service fails or returns an exit 1 the second url
&lt;code&gt;https://api.hipchat.com/&lt;/code&gt; with method &lt;code&gt;POST&lt;/code&gt; and the custom &lt;code&gt;data&lt;/code&gt;
will be used, notice that all the ocurances on the data that are within an
&lt;code&gt;_(key)_&lt;/code&gt; will be replaced with the corresponding value, in this case:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; room_id=10&amp;amp;from=Alerts&amp;amp;message=_name_+exit+code+_exit_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will be replaced with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; room_id=10&amp;amp;from=Alerts&amp;amp;message=SERVICE NAME+exit+code+0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When recovery the first url will be used, in this case will be a GET instead of a post, so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://api.hipchat.com/v1/rooms/message?auth_token=your_token&amp;amp;room_id=7&amp;amp;from=Alerts&amp;amp;message=service+OK+_name_+_because_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://api.hipchat.com/v1/rooms/message?auth_token=your_token&amp;amp;room_id=7&amp;amp;from=Alerts&amp;amp;message=service+OK+SERVICE+NAME+STATUS+200
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;notice that the &lt;em&gt;name&lt;/em&gt;, &lt;em&gt;exit&lt;/em&gt;, &lt;em&gt;because&lt;/em&gt; are been replaced with the values of name, exit, because of the service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;services-test&#34;&gt;services - Test&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Epazote&lt;/strong&gt; It is mainly used for HTTP services, for supervising other
applications that don&amp;rsquo;t listen or accept HTTP connections, like a database,
cache engine, etc. There are tools like
&lt;a href=&#34;https://cr.yp.to/daemontools.html&#34;&gt;daemontools&lt;/a&gt;,
&lt;a href=&#34;https://immortal.run&#34;&gt;immortal&lt;/a&gt; as already mentioned, even so, &lt;strong&gt;Epazote&lt;/strong&gt;
can eventually be used to execute an action based on the exit of a command
for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;salt-master:
    test: pgrep -f salt
    if_not:
        cmd: service restart salt_master
        notify: operations@domain.tld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case: &lt;code&gt;test: pgrep -f salt&lt;/code&gt; will execute the &lt;code&gt;cmd&lt;/code&gt; on the &lt;code&gt;if_not&lt;/code&gt;
block in case the exit code is &amp;gt; 0, from the &lt;code&gt;pgrep&lt;/code&gt; man page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EXIT STATUS
    The pgrep and pkill utilities return one of the following values upon exit:

        0       One or more processes were matched.
        1       No processes were matched.
        2       Invalid options were specified on the command line.
        3       An internal error occurred.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;extra-setup&#34;&gt;Extra setup&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;green dots give some comfort&lt;/em&gt; &amp;ndash; Because of this when using the &lt;code&gt;log&lt;/code&gt;
option an extra service could be configure as a receiver for all the post
that &lt;strong&gt;Epazote&lt;/strong&gt; produce and based on the data obtained create a custom
dashboard, something similar to: &lt;a href=&#34;https://status.cloud.google.com/&#34;&gt;https://status.cloud.google.com/&lt;/a&gt; or
&lt;a href=&#34;http://status.aws.amazon.com/&#34;&gt;http://status.aws.amazon.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>